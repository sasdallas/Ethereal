"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[6164],{8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(6540);const l={},i=t.createContext(l);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(i.Provider,{value:n},e.children)}},8717:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"kernel-api/hal","title":"HAL","description":"Hardware Abstraction Layer","source":"@site/docs/kernel-api/hal.md","sourceDirName":"kernel-api","slug":"/kernel-api/hal","permalink":"/docs/kernel-api/hal","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Kernel API","permalink":"/docs/category/kernel-api"},"next":{"title":"Memory","permalink":"/docs/kernel-api/memory"}}');var l=r(4848),i=r(8453);const s={},o="HAL",a={},c=[{value:"Interrupts",id:"interrupts",level:2},{value:"Handlers",id:"handlers",level:3},{value:"Controlling interrupts on the CPU",id:"controlling-interrupts-on-the-cpu",level:3},{value:"Power",id:"power",level:2},{value:"Power Example",id:"power-example",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"hal",children:"HAL"})}),"\n",(0,l.jsx)(n.p,{children:"Hardware Abstraction Layer"}),"\n",(0,l.jsx)(n.h2,{id:"interrupts",children:"Interrupts"}),"\n",(0,l.jsx)(n.h3,{id:"handlers",children:"Handlers"}),"\n",(0,l.jsx)(n.p,{children:"Registering interrupts can be done with the HAL through the following function:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"int hal_registerInterruptHandler(uintptr_t int_number, hal_interrupt_handler_t handler, void *context);\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"int_number"}),": The target interrupt number to use"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"handler"}),": The handler to use"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"context"}),": The context to pass to the handler"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The interrupt handler is declared as:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"typedef int (*hal_interrupt_handler_t)(void *context);\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"danger",children:(0,l.jsxs)(n.p,{children:["Returning nonzero from an interrupt handler will cause ",(0,l.jsx)(n.code,{children:"IRQ_HANDLER_FAILED"})," to be thrown."]})}),"\n",(0,l.jsx)(n.p,{children:"You can unregister interrupt handlers using the following function:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"void hal_unregisterInterruptHandler(uintptr_t int_no);\n"})}),"\n",(0,l.jsx)(n.p,{children:"Check if a handler is in use with the following function:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"int hal_interruptHandlerInUse(uintptr_t int_number);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"controlling-interrupts-on-the-cpu",children:"Controlling interrupts on the CPU"}),"\n",(0,l.jsx)(n.p,{children:"You can use the following functions to get/set the interrupt state:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"void hal_setInterruptState(int state);\nint hal_getInterruptState();\n"})}),"\n",(0,l.jsx)(n.p,{children:"Possible values:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"HAL_INTERRUPTS_ENABLED"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"HAL_INTERRUPTS_DISABLED"})}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"power",children:"Power"}),"\n",(0,l.jsx)(n.admonition,{type:"caution",children:(0,l.jsx)(n.p,{children:"To perform a safe shutdown, you should inform the kernel of the shutdown. See the example"})}),"\n",(0,l.jsx)(n.p,{children:"Available HAL power states include:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"HAL_POWER_REBOOT"}),": Reboot the computer"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"HAL_POWER_SHUTDOWN"}),": Shutdown the computer"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"HAL_POWER_HIBERNATE"}),": Hibernate the computer"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Prepare the computer to change to a power state with ",(0,l.jsx)(n.code,{children:"hal_changePowerState"})," (",(0,l.jsxs)(n.strong,{children:["note that ",(0,l.jsx)(n.code,{children:"kernel_prepareForPowerState"})," does this for you"]}),")"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"void hal_prepareForPowerState(int state);\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Set the power state with ",(0,l.jsx)(n.code,{children:"hal_setPowerState"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"int hal_setPowerState(int state);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"power-example",children:"Power Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"void shutdown() {\n    kernel_prepareForPowerState(HAL_POWER_SHUTDOWN);\n    hal_setPowerState(HAL_POWER_SHUTDOWN);\n    __builtin_unreachable();\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);