"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[2713],{11:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"your-first-driver/threading","title":"Threads and Processes","description":"Kernel threading and user process management is a key part of driver development","source":"@site/docs/your-first-driver/threading.md","sourceDirName":"your-first-driver","slug":"/your-first-driver/threading","permalink":"/docs/your-first-driver/threading","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"HAL","permalink":"/docs/your-first-driver/hal"},"next":{"title":"Kernel API","permalink":"/docs/category/kernel-api"}}');var i=r(4848),t=r(8453);const c={sidebar_position:5},a="Threads and Processes",l={},d=[{value:"Kernel Threads",id:"kernel-threads",level:2},{value:"Current core data",id:"current-core-data",level:2},{value:"Sleep API",id:"sleep-api",level:2},{value:"Overview",id:"overview",level:3},{value:"Waiting for another thread to wake you up",id:"waiting-for-another-thread-to-wake-you-up",level:3},{value:"Waiting for a duration",id:"waiting-for-a-duration",level:3},{value:"Waiting in a queue",id:"waiting-in-a-queue",level:3},{value:"Waiting for a condition",id:"waiting-for-a-condition",level:3},{value:"Synchronization",id:"synchronization",level:2},{value:"Spinlocks",id:"spinlocks",level:3},{value:"Mutexes",id:"mutexes",level:3}];function o(e){const n={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"threads-and-processes",children:"Threads and Processes"})}),"\n",(0,i.jsx)(n.p,{children:"Kernel threading and user process management is a key part of driver development"}),"\n",(0,i.jsx)(n.h2,{id:"kernel-threads",children:"Kernel Threads"}),"\n",(0,i.jsxs)(n.p,{children:["Kernel threads are ",(0,i.jsx)(n.strong,{children:"small processes in the kernel that are able to block/signal/etc"}),".",(0,i.jsx)(n.br,{}),"\n","They are extremely useful for ",(0,i.jsx)(n.strong,{children:"poller processes"})," or ",(0,i.jsx)(n.strong,{children:"cache flushing"})," processes."]}),"\n",(0,i.jsx)(n.p,{children:"Creating kernel threads in Ethereal is extremely easy, only two lines of code are required."}),"\n",(0,i.jsxs)(n.p,{children:["The interface to make a kernel thread is known as ",(0,i.jsx)(n.code,{children:"process_createKernel"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"process_t *process_createKernel(char *name, unsigned int flags, unsigned int priority, kthread_t entrypoint, void *data);\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"kthread_t"})," is declared as:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"typedef void (*kthread_t)(void *data);\n"})}),"\n",(0,i.jsx)(n.p,{children:"After you create a kernel thread, insert it by doing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"scheduler_insertThread(kthread->main_thread);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Your thread is now in the scheduler and you can assume it is already running."}),"\n",(0,i.jsx)(n.h2,{id:"current-core-data",children:"Current core data"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["To access this interface, include ",(0,i.jsx)(n.code,{children:"kernel/processor_data.h"})]})}),"\n",(0,i.jsxs)(n.p,{children:["Ethereal provides interfaces to get the data on the CPU being run on (and subsequently current process/thread) via the ",(0,i.jsx)(n.code,{children:"current_cpu"})," macro."]}),"\n",(0,i.jsxs)(n.p,{children:["This macro is implementation specific and ",(0,i.jsx)(n.strong,{children:"nothing may be assumed of it"})]}),"\n",(0,i.jsxs)(n.p,{children:["Here is the ",(0,i.jsx)(n.code,{children:"processor_t"})," structure that it contains:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"\ntypedef struct _processor {\n    int cpu_id;                         // CPU ID\n    page_t *current_dir;                // Current page directory\n    struct thread *current_thread;      // Current thread of the process\n\n    struct process *current_process;    // Current process of the CPU\n\n    struct process *idle_process;       // Idle process of the CPU\n\n#if defined(__ARCH_X86_64__) || defined(__ARCH_I386__)\n\n#ifdef __ARCH_X86_64__\n    uintptr_t kstack;                   // (0x40) Kernel-mode stack loaded in TSS\n    uintptr_t ustack;                   // (0x48) Usermode stack, saved in SYSCALL entrypoint    \n#endif\n\n    int lapic_id;\n\n    /* CPU basic information */\n    char cpu_model[48];\n    const char *cpu_manufacturer;\n    int cpu_model_number;\n    int cpu_family;\n#endif\n    \n    scheduler_cpu_t sched;              // Scheduler data\n    uint64_t idle_time;                 // Time the processor has spent idling\n} processor_t;\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["Unless you wrap your code in ",(0,i.jsx)(n.code,{children:"#ifdef"}),"s, anything marked as x86_64 or i386 specific is off limits."]})}),"\n",(0,i.jsx)(n.p,{children:"Useful variables:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cpu_id"}),": Current CPU ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"current_dir"}),": Page directory"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"current_process"}),": Currently running process"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"current_thread"}),": Currently running thread"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sleep-api",children:"Sleep API"}),"\n",(0,i.jsx)(n.p,{children:"Sleeping and blocking threads is well supported in Ethereal."}),"\n",(0,i.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Ethereal's sleep system operates on a basis of prepare, notify, enter."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prepare"})," yourself for sleeping with a ",(0,i.jsx)(n.code,{children:"sleep_untilXXX"})," or other function"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Notify"})," anyone else that you are sleeping and to wake you up (this is up to you)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enter"})," sleep state."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here's an example that sleeps for a second:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"sleep_untilTime(current_cpu->current_thread, 1, 0);\nint w = sleep_enter();\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"sleep_enter"})," will enter you into the sleep state."]}),"\n",(0,i.jsx)(n.p,{children:"It returns one of a few wakeup reasons:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WAKEUP_ANOTHER_THREAD"}),": Another thread used ",(0,i.jsx)(n.code,{children:"sleep_wakeup"})," to wake you up"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WAKEUP_TIME"}),": You wokeup on time expiration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WAKEUP_SIGNAL"}),": You were signalled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WAKEUP_COND"}),": Condition woke you up"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"waiting-for-another-thread-to-wake-you-up",children:"Waiting for another thread to wake you up"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.code,{children:"sleep_untilNever"})," call for this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"int sleep_untilNever(thread_t *thr);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Simply have the other thread use ",(0,i.jsx)(n.code,{children:"sleep_wakeup"})," to wake you up:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"int sleep_wakeup(thread_t *thread);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Wakeups from this will return ",(0,i.jsx)(n.code,{children:"WAKEUP_ANOTHER_THREAD"})," (or another reason)"]}),"\n",(0,i.jsx)(n.h3,{id:"waiting-for-a-duration",children:"Waiting for a duration"}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:"sleep_untilTime"})," for this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"int sleep_untilTime(struct thread *thread, unsigned long seconds, unsigned long subseconds);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Wakeups from this will return ",(0,i.jsx)(n.code,{children:"WAKEUP_TIME"})," if the time expires (or another reason)"]}),"\n",(0,i.jsx)(n.h3,{id:"waiting-in-a-queue",children:"Waiting in a queue"}),"\n",(0,i.jsxs)(n.p,{children:["First, you'll need to create the queue using ",(0,i.jsx)(n.code,{children:"sleep_createQueue"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"sleep_queue_t *sleep_createQueue(char *name);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then to sleep in it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"int sleep_inQueue(sleep_queue_t *queue);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Others can wakeup you up via:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"int sleep_wakeupQueue(sleep_queue_t *queue, int amounts);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Use -1 for all threads in the queue."}),"\n",(0,i.jsxs)(n.p,{children:["Wakeups from this will return ",(0,i.jsx)(n.code,{children:"WAKEUP_ANOTHER_THREAD"})," (or another reason)"]}),"\n",(0,i.jsx)(n.h3,{id:"waiting-for-a-condition",children:"Waiting for a condition"}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"This interface may not be well supported"})}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"sleep_untilCondition"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"int sleep_untilCondition(struct thread *thread, sleep_condition_t condition, void *context);\n"})}),"\n",(0,i.jsx)(n.p,{children:"The condition function simply takes context as an argument and returns 1 when the condition is met."}),"\n",(0,i.jsxs)(n.p,{children:["Wakeups from this will return ",(0,i.jsx)(n.code,{children:"WAKEUP_COND"})," (or another reason)"]}),"\n",(0,i.jsx)(n.h2,{id:"synchronization",children:"Synchronization"}),"\n",(0,i.jsx)(n.p,{children:"Spinlocks and mutexes are fun!"}),"\n",(0,i.jsx)(n.h3,{id:"spinlocks",children:"Spinlocks"}),"\n",(0,i.jsxs)(n.p,{children:["Make a spinlock via ",(0,i.jsx)(n.code,{children:"spinlock_create"})," or declare it as an empty structure:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"spinlock_t *spinlock_create(char *name);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Interfaces (you should be well familiar):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"void spinlock_acquire(spinlock_t *spinlock);\nint spinlock_tryAcquire(spinlock_t *spinlock);\nvoid spinlock_release(spinlock_t *spinlock);\nvoid spinlock_destroy(spinlock_t *spinlock);\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"IRQs are disabled during acquisition and restored after release"})}),"\n",(0,i.jsx)(n.h3,{id:"mutexes",children:"Mutexes"}),"\n",(0,i.jsxs)(n.p,{children:["Make a mutex via ",(0,i.jsx)(n.code,{children:"mutex_create"})," (you cannot declare it as an empty structure):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"mutex_t *mutex_create(char *name);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Interfaces (you should be well familiar):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"void mutex_acquire(mutex_t *mutex);\nint mutex_tryAcquire(mutex_t *mutex);\nvoid mutex_release(mutex_t *mutex);\nvoid mutex_destroy(mutex_t *mutex);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>a});var s=r(6540);const i={},t=s.createContext(i);function c(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);